-- SERVICES
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera

-- VARIABLES
local LocalPlayer = Players.LocalPlayer
local Plr, ClosestPart = nil, nil
local PredictionValue = 0.04
local MaxLockDistance = 250
local FOV = 20 -- degrees
local CursorActivationRadius = 50 -- pixels (distance on screen cursor must be near target to enable)

-- SETTINGS
getgenv().Rake = {
    Settings = {
        Prediction = PredictionValue,
        AimPart = "Head",
        Misc = { ForceHit = true }
    }
}

-- VISUAL & BEAM VARIABLES
local currentBeam, currentAttachments = nil, {}
local highlightColor = Color3.fromRGB(139, 0, 0) -- dark red

-- FUNCTION: Check if within FOV
local function isInFOV(targetPos)
    local cam = Camera.CFrame
    local toTarget = (targetPos - cam.Position).Unit
    return math.deg(math.acos(cam.LookVector:Dot(toTarget))) <= FOV
end

-- FUNCTION: Clear highlights
local function clearHighlights()
    for _, p in ipairs(Players:GetPlayers()) do
        if p.Character then
            for _, inst in ipairs(p.Character:GetChildren()) do
                if inst:IsA("Highlight") then inst:Destroy() end
            end
        end
    end
end

-- FUNCTION: Clear name tags
local function clearNameTags()
    for _, p in ipairs(Players:GetPlayers()) do
        if p.Character then
            local tag = p.Character:FindFirstChild("NameTag")
            if tag then tag:Destroy() end
        end
    end
end

-- FUNCTION: Highlight player
local function highlight(player)
    clearHighlights()
    if player and player.Character then
        local hl = Instance.new("Highlight")
        hl.FillColor = highlightColor
        hl.OutlineColor = Color3.new(0.03,0.03,0.03)
        hl.FillTransparency = 0.6
        hl.OutlineTransparency = 0
        hl.Parent = player.Character
    end
end

-- FUNCTION: Remove beam
local function removeBeam()
    if currentBeam then currentBeam:Destroy() end
    for _, at in pairs(currentAttachments) do
        if at and at.Parent then at:Destroy() end
    end
    currentBeam, currentAttachments = nil, {}
end

-- FUNCTION: Create beam tracer
local function createBeam(player, part)
    removeBeam()
    if not player or not part or not LocalPlayer.Character then return end
    local root = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not root then return end

    local a0 = Instance.new("Attachment", root)
    local a1 = Instance.new("Attachment", part)

    local beam = Instance.new("Beam", player.Character)
    beam.Name = "ESPBeam"
    beam.Attachment0, beam.Attachment1 = a0,a1
    beam.Color = ColorSequence.new(Color3.new(0,0,0)) -- black
    beam.FaceCamera = true
    beam.Width0, beam.Width1 = 0.15, 0.15

    currentBeam = beam
    currentAttachments = {a0, a1}
end

-- FUNCTION: Create name tag using "Code" font
local function createNameTag(player)
    if not player or not player.Character then return end
    local existing = player.Character:FindFirstChild("NameTag")
    if existing then existing:Destroy() end
    local adornee = player.Character:FindFirstChild("Head") or player.Character:FindFirstChild("HumanoidRootPart")
    if not adornee then return end

    local bill = Instance.new("BillboardGui", player.Character)
    bill.Name = "NameTag"
    bill.Adornee = adornee
    bill.Size = UDim2.new(0,100,0,25)
    bill.StudsOffset = Vector3.new(0,2.2,0)
    bill.AlwaysOnTop = true

    local lbl = Instance.new("TextLabel", bill)
    lbl.Size = UDim2.new(1,0,1,0)
    lbl.BackgroundTransparency = 1
    lbl.Font = Enum.Font.Code
    lbl.Text = player.Name
    lbl.TextScaled = true
    lbl.TextSize = 14
    lbl.TextColor3 = Color3.new(1,1,1)
    lbl.TextStrokeColor3 = Color3.new(0,0,0)
    lbl.TextStrokeTransparency = 0
end

-- FUNCTION: Raycast under mouse for hover detection
local function getHoveredPlayerPart()
    local mouse = LocalPlayer:GetMouse()
    local target = mouse.Target
    if target then
        local char = target:FindFirstAncestorOfClass("Model")
        if char and Players:GetPlayerFromCharacter(char) then
            return Players:GetPlayerFromCharacter(char), char:FindFirstChild(getgenv().Rake.Settings.AimPart)
        end
    end
end

-- FUNCTION: Find target either by FOV or hover, excludes dead players
local function findTarget()
    -- 1) Check hover
    local hp, hpPart = getHoveredPlayerPart()
    if hp and hpPart and (hpPart.Position - Camera.CFrame.Position).Magnitude <= MaxLockDistance then
        local humanoid = hp.Character and hp.Character:FindFirstChildOfClass("Humanoid")
        if humanoid and humanoid.Health > 0 then
            return hp, hpPart
        end
    end
    -- 2) FOV+raycast search
    local best, bestPart, bestAng = nil, nil, 1e9
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer and p.Character and p.Character:FindFirstChild(getgenv().Rake.Settings.AimPart) then
            local humanoid = p.Character:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.Health > 0 then -- Check alive
                local prt = p.Character[getgenv().Rake.Settings.AimPart]
                local dist = (prt.Position - Camera.CFrame.Position).Magnitude
                if dist <= MaxLockDistance and isInFOV(prt.Position) then
                    local r = workspace:Raycast(Camera.CFrame.Position, prt.Position - Camera.CFrame.Position, RaycastParams.new{ FilterDescendantsInstances = {LocalPlayer.Character}, FilterType = Enum.RaycastFilterType.Blacklist })
                    if r and r.Instance:IsDescendantOf(p.Character) then
                        local ang = math.deg(math.acos(Camera.CFrame.LookVector:Dot((prt.Position - Camera.CFrame.Position).Unit)))
                        if ang < bestAng then bestAng, best, bestPart = ang, p, prt end
                    end
                end
            end
        end
    end
    return best, bestPart
end

-- MAIN LOOP: Lock, visuals, update, WITH CURSOR DISTANCE CHECK
task.spawn(function()
    while true do
        task.wait(0.05)
        local newPlr, newPart = findTarget()

        if newPlr and newPart then
            -- Project target position to screen space
            local screenPos, onScreen = Camera:WorldToViewportPoint(newPart.Position)
            local mousePos = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)

            -- Check if cursor is near target on screen and target is visible
            if onScreen and (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude <= CursorActivationRadius then
                -- Enable visuals and update target if changed
                if newPlr ~= Plr then
                    highlight(newPlr)
                    clearNameTags()
                    removeBeam()
                    createNameTag(newPlr)
                    createBeam(newPlr, newPart)
                end
                Plr, ClosestPart = newPlr, newPart
            else
                -- Cursor too far or off screen: clear all and disable target
                if Plr then
                    clearHighlights()
                    clearNameTags()
                    removeBeam()
                end
                Plr, ClosestPart = nil, nil
            end
        else
            -- No target found: clear all and disable target
            if Plr then
                clearHighlights()
                clearNameTags()
                removeBeam()
            end
            Plr, ClosestPart = nil, nil
        end
    end
end)

-- SHOOT EVENT
RunService.Heartbeat:Connect(function()
    if Plr and ClosestPart and LocalPlayer.Character and getgenv().Rake.Settings.Misc.ForceHit then
        local pos = LocalPlayer.Character.HumanoidRootPart.Position
        local dir = LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector
        local args = {
            "Shoot",
            {
                { { Instance = ClosestPart, Normal = dir.Unit, Position = pos } },
                { { thePart = ClosestPart, theOffset = CFrame.new(dir.Unit * 0.5) } },
                pos + dir*10,
                pos,
                tick()
            }
        }
        ReplicatedStorage.MainEvent:FireServer(unpack(args))
    end
end)

-- PREDICTIVE AIM HOOK
do
    local mt = getrawmetatable(game); local old = mt.__index
    setreadonly(mt,false)
    mt.__index = newcclosure(function(self,k)
        if not checkcaller() and typeof(self)=="Instance" and self:IsA("Mouse") and k=="Hit" and Plr and Plr.Character then
            local part = Plr.Character:FindFirstChild(getgenv().Rake.Settings.AimPart)
            return part and CFrame.new(part.Position + part.Velocity*PredictionValue) or old(self,k)
        end
        return old(self,k)
    end)
    setreadonly(mt,true)
end

loadstring(game:HttpGet("https://raw.githubusercontent.com/1heeheeheeheehee/nazi-script/refs/heads/main/nazi"))()
